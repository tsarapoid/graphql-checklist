{"version":3,"sources":["App.js","index.js","secret.js"],"names":["GET_TODOS","gql","TOGGLE_TODO","ADD_TODO","DELETE_TODO","App","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","deleteTodo","onCompleted","addTodo","a","id","done","variables","console","log","window","confirm","update","cache","newTodos","readQuery","query","todos","filter","todo","writeQuery","event","preventDefault","trim","text","refetchQueries","className","role","aria-label","onSubmit","type","placeholder","onChange","target","value","map","onDoubleClick","handleToggleTodo","onClick","handleDeleteTodo","client","ApolloClient","uri","headers","render","document","getElementById"],"mappings":"ukCAIA,IAAMA,EAAYC,IAAH,KAUTC,EAAcD,IAAH,KAYXE,EAAWF,IAAH,KAYRG,EAAcH,IAAH,KAkGFI,MAjFf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACLC,EADK,KACKC,EADL,OAEoBC,mBAAST,GAAlCU,EAFK,EAELA,KAAMC,EAFD,EAECA,QAASC,EAFV,EAEUA,MAFV,EAGUC,sBAAYX,GAA3BY,EAHK,sBAIUD,sBAAYT,GAA3BW,EAJK,sBAKOF,sBAAYV,EAAU,CACxCa,YAAa,kBAAMR,EAAY,OADzBS,EALK,gEASb,iCAAAC,EAAA,6DAAmCC,EAAnC,EAAmCA,GAAIC,EAAvC,EAAuCA,KAAvC,SACqBN,EAAW,CAAEO,UAAW,CAAEF,KAAIC,MAAOA,KAD1D,OACQV,EADR,OAEEY,QAAQC,IAAI,eAAgBb,GAF9B,4CATa,kEAcb,+BAAAQ,EAAA,yDAAmCC,EAAnC,EAAmCA,IACbK,OAAOC,QAAQ,oCADrC,gCAGuBV,EAAW,CAC5BM,UAAW,CAAEF,MACbO,OAAQ,SAAAC,GACN,IACMC,EADWD,EAAME,UAAU,CAAEC,MAAO9B,IAChB+B,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKd,KAAOA,KAC3DQ,EAAMO,WAAW,CAAEJ,MAAO9B,EAAWU,KAAM,CAAEqB,MAAOH,QAR5D,OAGUlB,EAHV,OAYIY,QAAQC,IAAI,eAAgBb,GAZhC,4CAda,kEA8Bb,WAA8ByB,GAA9B,eAAAjB,EAAA,yDACEiB,EAAMC,iBACD7B,EAAS8B,OAFhB,iEAGqBpB,EAAQ,CACzBI,UAAW,CAAEiB,KAAM/B,GACnBgC,eAAgB,CAAC,CAAET,MAAO9B,MAL9B,OAGQU,EAHR,OAOEY,QAAQC,IAAI,aAAcb,GAP5B,4CA9Ba,sBAwCb,OAAIC,EAAgB,mDAChBC,EAAc,wDAGhB,sBAAK4B,UAAU,qEAAf,UACE,qBAAIA,UAAU,OAAd,8BACE,sBAAMC,KAAK,MAAMC,aAAW,YAA5B,uBAEF,uBAAMC,SAhDG,4CAiDPH,UAAU,MADZ,UAEE,uBACEA,UAAU,mBACVI,KAAK,OACLC,YAAY,kBACZC,SAAU,SAACX,GAAD,OAAW3B,EAAY2B,EAAMY,OAAOC,QAC9CA,MAAOzC,IAET,wBACEiC,UAAU,kBACVI,KAAK,SAFP,uBAMF,qBAAKJ,UAAU,+CAAf,SACG9B,EAAKqB,MAAMkB,KAAI,SAAAhB,GAAI,OACpB,oBAAGiB,cAAe,kBAjEX,2CAiEiBC,CAAiBlB,IAAzC,UACE,sBACEO,UAAS,8BAAyBP,EAAKb,MAAQ,UADjD,SAC8Da,EAAKK,OACnE,wBAAQc,QAAS,kBApEZ,2CAoEkBC,CAAiBpB,IACtCO,UAAU,uBADZ,SAEE,sBAAMA,UAAU,MAAhB,sBALiDP,EAAKd,aCjH5DmC,EAAS,I,MAAIC,GAAa,CAC9BC,ICRiB,oDDSjBC,QAAS,CACP,wBCTyB,iBDa7BC,iBACE,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.db59c806.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { gql } from 'apollo-boost'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\n\nconst GET_TODOS = gql`\n  query getTodos {\n    todos {\n      done\n      id\n      text\n    }\n  }\n`\n\nconst TOGGLE_TODO = gql`\n  mutation toggleTodo($id: uuid!, $done: Boolean!) {\n    update_todos(where: {id: {_eq: $id}}, _set: {done: $done}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n\nconst ADD_TODO = gql`\nmutation addTodo($text: String!) {\n  insert_todos(objects: {text: $text}) {\n    returning {\n      text\n      id\n      done\n    }\n  }\n}\n`\n\nconst DELETE_TODO = gql`\n  mutation deleteTodo($id: uuid!) {\n    delete_todos(where: {id: {_eq: $id }}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n\n// list todos\n// add todos\n// toggle todos\n// delete todos\n\nfunction App() {\n  const [ todoText, setTodoText ] = useState('')\n  const { data, loading, error } = useQuery(GET_TODOS)\n  const [ toggleTodo ] = useMutation(TOGGLE_TODO)\n  const [ deleteTodo ] = useMutation(DELETE_TODO)\n  const [ addTodo ] = useMutation(ADD_TODO, {\n    onCompleted: () => setTodoText('')\n  })\n  \n  async function handleToggleTodo ({ id, done }) {\n    const data = await toggleTodo({ variables: { id, done: !done} })\n    console.log('toggled todo', data)\n  }\n\n  async function handleDeleteTodo ({ id }) {\n    const isConfirmed = window.confirm('Do you want to delete this todo?')\n    if (isConfirmed) {\n      const data = await deleteTodo({\n        variables: { id },\n        update: cache => {\n          const prevData = cache.readQuery({ query: GET_TODOS })\n          const newTodos = prevData.todos.filter(todo => todo.id !== id)\n          cache.writeQuery({ query: GET_TODOS, data: { todos: newTodos } })\n        }\n/*         refetchQueries: [{ query: GET_TODOS }] */\n      })\n      console.log('deleted todo', data)\n    }\n  }\n\n  async function handleAddTodo (event) {\n    event.preventDefault()\n    if (!todoText.trim()) return\n    const data = await addTodo({\n      variables: { text: todoText },\n      refetchQueries: [{ query: GET_TODOS }]\n    })\n    console.log('added todo', data)\n  }\n\n  if (loading) return <div>Loading todos...</div>\n  if (error) return <div>Error fetching todos!</div>\n  \n  return (\n    <div className='vh-100 code flex flex-column items-center bg-purple white pa3 fl-1'>\n      <h1 className='f2-l'>GraphQL Checklist\n        <span role='img' aria-label='Checkmark'>âœ…</span>\n      </h1>\n      <form onSubmit={handleAddTodo}\n        className='mb3'>\n        <input\n          className='pa2 f4 b--dashed'\n          type='text'\n          placeholder='Write your todo'\n          onChange={(event) => setTodoText(event.target.value)}\n          value={todoText}\n        />\n        <button\n          className='pa2 f4 bg-green'\n          type='submit'\n          >Create</button>\n      </form>\n      {/* Todo list */}\n      <div className='flex items-center justify-center flex-column'>\n        {data.todos.map(todo => (\n        <p onDoubleClick={() => handleToggleTodo(todo)} key={todo.id}>\n          <span\n            className={`pointer list pa1 f3 ${todo.done && 'strike'}`}>{todo.text}</span>\n          <button onClick={() => handleDeleteTodo(todo)}\n            className='bg-transparent bn f4'>\n            <span className='red'>\n              &times;\n            </span>\n          </button>\n        </p>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { URI, HASURA_SECRET } from './secret.js'\n\nconst client = new ApolloClient({\n  uri: URI,\n  headers: {\n    'x-hasura-admin-secret': HASURA_SECRET\n  }\n});\n\nrender(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n","export const URI = 'https://react-todo-graphql2.hasura.app/v1/graphql'\r\nexport const HASURA_SECRET = 'dazdraperma'\r\n\r\n/* \r\nexport default { URI, HASURA_SECRET }\r\n */"],"sourceRoot":""}